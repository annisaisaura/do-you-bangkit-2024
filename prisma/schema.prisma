datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model refresh_session {
  id     String @id @default(uuid())
  userId String @unique(map: "Refresh_Session_userId_key")
  user   User   @relation(fields: [userId], references: [id], map: "Refresh_Session_userId_fkey")
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique(map: "User_email_key")
  password        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  refresh_session refresh_session?
  userCourse      UserCourse[]
}

enum JenisKelamin {
  Pria
  Perempuan
}

model UserCareer {
  id             String       @id @default(uuid())
  bidangId       Int
  pendidikanId   Int
  jenisKelamin   JenisKelamin
  skillId        Int
  roleId         Int
  Bidang         Bidang       @relation(fields: [bidangId], references: [id])
  Pendidikan     Pendidikan   @relation(fields: [pendidikanId], references: [id])
  Skill          Skill        @relation(fields: [skillId], references: [id])
  Role           Role         @relation(fields: [roleId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Bidang {
  id         Int          @id @default(autoincrement())
  Bidang     String
  userCareer UserCareer[]
}

model Pendidikan {
  id         Int          @id @default(autoincrement())
  Pendidikan String
  userCareer UserCareer[]
}

model Skill {
  id         Int          @id @default(autoincrement())
  Skill      String
  userCareer UserCareer[]
}

model Role {
  id         Int          @id @default(autoincrement())
  Role       String
  userCareer UserCareer[]
}

model UserCourse {
  id                       String  @id @default(uuid())
  courseId                 Int
  moduleId                 Int
  Course_Learning_Material Course  @relation(fields: [courseId], references: [id])
  Module                   Module  @relation(fields: [moduleId], references: [id])
  User                     User?   @relation(fields: [userId], references: [id])
  userId                   String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Module {
  id                       Int             @id @default(autoincrement())
  Module                   String
  courseId                 Int
  courseLevelId            Int
  difficultyLevelId        Int
  Links                    String
  Course_Learning_Material Course          @relation(fields: [courseId], references: [id])
  Course_Level             CourseLevel     @relation(fields: [courseLevelId], references: [id])
  Difficulty_Level         DifficultyLevel @relation(fields: [difficultyLevelId], references: [id])
  userCourse               UserCourse[]
}

model Course {
  id                       Int          @id @default(autoincrement())
  Course_Learning_Material String
  Module                   Module[]
  userCourse               UserCourse[]
}

model CourseLevel {
  id           Int      @id @default(autoincrement())
  Course_Level String
  Module       Module[]
}

model DifficultyLevel {
  id               Int      @id @default(autoincrement())
  Difficulty_Level String
  Module           Module[]
}