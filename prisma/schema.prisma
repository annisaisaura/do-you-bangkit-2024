datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model RefreshSession {
  id      String  @id @default(uuid())
  userId  String  @unique(map: "Refresh_Session_userId_key")
  user    User    @relation(fields: [userId], references: [id], map: "Refresh_Session_userId_fkey")
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique(map: "User_email_key")
  password        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  refreshSession  RefreshSession?
  userCareer      UserCareer[]
  userCourse      UserCourse[]
}

enum JenisKelamin {
  Pria
  Perempuan
}

model UserCareer {
  id            String        @id @default(uuid())
  userId        String?
  bidangId      Int
  pendidikanId  Int
  jenisKelamin  JenisKelamin
  skillId       Int
  roleId        Int
  user          User?         @relation(fields: [userId], references: [id])
  bidang        Bidang        @relation(fields: [bidangId], references: [id])
  pendidikan    Pendidikan    @relation(fields: [pendidikanId], references: [id])
  skill         Skill         @relation(fields: [skillId], references: [id])
  role          Role          @relation(fields: [roleId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Bidang {
  id          Int           @id @default(autoincrement())
  bidang      String
  userCareer  UserCareer[]
}

model Pendidikan {
  id          Int           @id @default(autoincrement())
  pendidikan  String
  userCareer  UserCareer[]
}

model Skill {
  id          Int           @id @default(autoincrement())
  skill       String
  userCareer  UserCareer[]
}

model Role {
  id          Int           @id @default(autoincrement())
  role        String
  userCareer  UserCareer[]
}

model UserCourse {
  id        String    @id @default(uuid())
  userId    String?
  courseId  Int
  moduleId  Int
  user      User?     @relation(fields: [userId], references: [id])
  course    Course    @relation(fields: [courseId], references: [id])
  module    Module    @relation(fields: [moduleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Module {
  id                Int             @id @default(autoincrement())
  module            String
  courseId          Int
  courseLevelId     Int
  difficultyLevelId Int
  link              String
  course            Course          @relation(fields: [courseId], references: [id])
  courseLevel       CourseLevel     @relation(fields: [courseLevelId], references: [id])
  difficultyLevel   DifficultyLevel @relation(fields: [difficultyLevelId], references: [id])
  userCourse        UserCourse[]
}

model Course {
  id          Int           @id @default(autoincrement())
  course      String
  module      Module[]
  userCourse  UserCourse[]
}

model CourseLevel {
  id          Int      @id @default(autoincrement())
  courseLevel String
  module      Module[]
}

model DifficultyLevel {
  id              Int      @id @default(autoincrement())
  difficultyLevel String
  module          Module[]
}